/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.itver.component;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JMenuItem;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;

/**
 *
 * @author vrebo
 */
public class OutputPane2 extends javax.swing.JPanel {

    private String title;

    /**
     * Creates new form OutputPane
     *
     * @param title The title of the output pane to be shown.
     */
    public OutputPane2(String title) {
        this.title = title;
        initComponents();
        _initComponents();
        initListeners();
    }

    public OutputPane2() {
        this("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        wrapMenuItem = new javax.swing.JMenuItem();
        clearMenuItem = new javax.swing.JMenuItem();
        contextMenu = new javax.swing.JPopupMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputArea = new javax.swing.JTextPane();

        wrapMenuItem.setText("jMenuItem1");

        clearMenuItem.setText("jMenuItem1");

        setBorder(javax.swing.BorderFactory.createTitledBorder(title));
        setLayout(new java.awt.BorderLayout());

        outputArea.setComponentPopupMenu(contextMenu);
        jScrollPane1.setViewportView(outputArea);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem clearMenuItem;
    private javax.swing.JPopupMenu contextMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane outputArea;
    private javax.swing.JMenuItem wrapMenuItem;
    // End of variables declaration//GEN-END:variables

    private void _initComponents() {
        wrapMenuItem = new JMenuItem("Comprimir texto");
        clearMenuItem = new JMenuItem("Limpiar");
        contextMenu.add(wrapMenuItem);
        contextMenu.add(clearMenuItem);
        outputArea.setEditable(false);
        createStyles();
        setPreferredSize(new Dimension(400, 200));
        setMinimumSize(new Dimension(100, 100));
        outputArea.setMinimumSize(new Dimension(100, 100));
    }

    private void initListeners() {
        ActionListener l = new ActionListenerImpl();
        wrapMenuItem.addActionListener(l);
        clearMenuItem.addActionListener(l);
    }

    public void clearOutput() {
        outputArea.setText("");
    }

    public void appendInfoMessage(String message) {
        appendMessage(message, "information");
    }

    public void appendErrorMessage(String message) {
        appendMessage(message, "error");
    }

    public void appendWarningMessage(String message) {
        appendMessage(message, "warning");
    }

    private void appendMessage(String message, String style) {
        try {
            StyledDocument doc = outputArea.getStyledDocument();
            doc.insertString(doc.getLength(), message, doc.getStyle(style));
        } catch (BadLocationException ex) {
        }
    }

    private void createStyles() {
        StyledDocument doc = outputArea.getStyledDocument();
        Style def = StyleContext.getDefaultStyleContext().
                getStyle(StyleContext.DEFAULT_STYLE);
        Style regular = doc.addStyle("regular", def);
        StyleConstants.setFontFamily(def, "SansSerif");

        Style s = doc.addStyle("information", regular);
        StyleConstants.setForeground(s, Color.BLACK);

        s = doc.addStyle("warning", regular);
        StyleConstants.setForeground(s, Color.BLUE);

        s = doc.addStyle("error", regular);
        StyleConstants.setForeground(s, Color.RED);

    }

    private class ActionListenerImpl implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            switch (e.getActionCommand()) {
                case "Comprimir texto":
                    break;
                case "Limpiar":
                    clearOutput();
                    break;
            }
        }

    }

    @Override
    public void setFont(Font f) {
        if (outputArea != null) {
            outputArea.setFont(f);
        }
    }

    @Override
    public void setForeground(Color fg) {
        if (outputArea != null) {
            outputArea.setForeground(fg);
        }
    }

    public void setBackGround(Color bg) {
        if (outputArea != null) {
            outputArea.setBackground(Color.DARK_GRAY);
        }
    }
}
