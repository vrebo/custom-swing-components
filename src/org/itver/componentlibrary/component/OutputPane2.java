package org.itver.componentlibrary.component;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.JMenuItem;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import org.itver.componentlibrary.bo.LogMessage;

/**
 *
 * @author vrebo
 */
public class OutputPane2 extends javax.swing.JPanel {

    private String title;

    /**
     * Creates new form OutputPane
     *
     * @param title The title of the output pane to be shown.
     */
    public OutputPane2(String title) {
        this.title = title;
        initComponents();
        _initComponents();
        initListeners();
        createStyles();
    }

    public OutputPane2() {
        this("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        wrapMenuItem = new javax.swing.JMenuItem();
        clearMenuItem = new javax.swing.JMenuItem();
        contextMenu = new javax.swing.JPopupMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputArea = new javax.swing.JTextPane();

        wrapMenuItem.setText("jMenuItem1");

        clearMenuItem.setText("jMenuItem1");

        setBorder(javax.swing.BorderFactory.createTitledBorder(title));
        setLayout(new java.awt.BorderLayout());

        outputArea.setComponentPopupMenu(contextMenu);
        jScrollPane1.setViewportView(outputArea);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem clearMenuItem;
    private javax.swing.JPopupMenu contextMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane outputArea;
    private javax.swing.JMenuItem wrapMenuItem;
    // End of variables declaration//GEN-END:variables

    private void _initComponents() {
        wrapMenuItem = new JMenuItem("Comprimir texto");
        clearMenuItem = new JMenuItem("Limpiar");
        contextMenu.add(wrapMenuItem);
        contextMenu.add(clearMenuItem);
        outputArea.setEditable(false);
//        outputArea.
        setPreferredSize(new Dimension(400, 200));
        setMinimumSize(new Dimension(100, 100));
        outputArea.setMinimumSize(new Dimension(100, 100));
    }

    private void initListeners() {
        ActionListener l = new ActionListenerImpl();
        wrapMenuItem.addActionListener(l);
        clearMenuItem.addActionListener(l);
    }

    public void clearOutput() {
        outputArea.setText("");
    }

    public void appendMessages(List<LogMessage> logMessages) {
        for (LogMessage logMessage : logMessages) {
            appendMessage(logMessage.getMessage(), logMessage.getType());
        }
    }

    public void appendMessages(LogMessage[] logMessages) {
        for (LogMessage logMessage : logMessages) {
            appendMessage(logMessage.getMessage(), logMessage.getType());
        }
    }

    public void appendMessage(LogMessage logMessage) {
        appendMessage(logMessage.getMessage(), logMessage.getType());
    }

    private void appendMessage(String message, LogMessage.Type type) {
        try {
            StyledDocument doc = outputArea.getStyledDocument();
            doc.insertString(doc.getLength(), message.concat("\n"), doc.getStyle(type.toString()));
        } catch (BadLocationException ex) {
        }
    }

    private void createStyles() {
        StyledDocument doc = outputArea.getStyledDocument();
        Style def = StyleContext.getDefaultStyleContext().
                getStyle(StyleContext.DEFAULT_STYLE);

        def = doc.addStyle("base", def);
        StyleConstants.setFontFamily(def, "Droid Sans");
        StyleConstants.setFontSize(def, 13);

        Style s;

        for (LogMessage.Type type : LogMessage.Type.values()) {
            s = doc.addStyle(type.toString(), def);
            StyleConstants.setForeground(s, type.fontColor());
        }

    }

    private class ActionListenerImpl implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            switch (e.getActionCommand()) {
                case "Comprimir texto":
                    break;
                case "Limpiar":
                    clearOutput();
                    break;
            }
        }

    }

    @Override
    public void setFont(Font f) {
        if (outputArea != null) {
            outputArea.setFont(f);
        }
    }

    @Override
    public void setForeground(Color fg) {
        if (outputArea != null) {
            outputArea.setForeground(fg);
        }
    }

    public void setBackGround(Color bg) {
        if (outputArea != null) {
            outputArea.setBackground(Color.DARK_GRAY);
        }
    }
}
